Tôi muốn bạn thực hiện một dự án frontend giống Devin.ai với các task chi tiết dưới đây.

Vui lòng bắt đầu từ **Task 0 – Setup**: khởi tạo dự án React + TypeScript (hoặc Next.js nếu hỗ trợ SEO tốt hơn), cấu hình TailwindCSS, setup i18n (Tiếng Việt & English), và tạo Header/Footer theo yêu cầu thương hiệu mới "HDT AI".

Sau đó, tiếp tục tuần tự từ Task 1 → Task 5.

Tôi sẽ cung cấp các file kèm theo:
- `PromptTK.pdf`: Hướng dẫn branding
- `thongtincongty.pdf`: Nội dung công ty
- `ChiaTask.pdf`: Phân chia nhiệm vụ chi tiết

Khi đã hoàn thành từng task, hãy báo lại với tôi và cho tôi xem preview nếu có.

#### Task 0: Chuẩn bị chung (Setup và Cấu hình)

- **Mục tiêu**: Khởi tạo dự án frontend, cấu hình môi trường phát triển, và thiết lập các thành phần dùng chung.
- **Giao việc cho AI**: 
  - "Khởi tạo một dự án frontend mới sử dụng React + TypeScript (hoặc Next.js nếu phù hợp hơn cho cấu trúc đa ngôn ngữ và SEO)."
  - "Cài đặt và cấu hình TailwindCSS cho dự án."
  - "Thiết lập giải pháp đa ngôn ngữ (i18n) hỗ trợ Tiếng Việt và Tiếng Anh. Đảm bảo cấu trúc file ngôn ngữ rõ ràng (ví dụ: `i18n/vi.json`, `i18n/en.json`)."
  - "Tạo cấu trúc thư mục cơ bản: `pages/`, `components/`, `assets/`, `i18n/`, `styles/`."
  - "Thiết kế và triển khai thành phần `Header` dùng chung. Trong `Header`:
    - Thay thế logo hiện tại bằng logo mới tôi gửi file kèm    - Ở mọi vị trí có chữ 'Devin', thay bằng 'HDT'.
    - Ở mọi vị trí có chữ 'Devin AI', thay bằng 'HDT AI'.
    - Thêm một menu chọn ngôn ngữ (dropdown hoặc toggle) ở góc trên bên phải, cho phép chuyển đổi giữa Tiếng Việt và Tiếng Anh. Đảm bảo khi chọn ngôn ngữ, nội dung trang sẽ hiển thị tương ứng."
  - "Thiết kế và triển khai thành phần `Footer` dùng chung, sao chép bố cục và phong cách từ trang Devin.ai. Đảm bảo các liên kết và thông tin bản quyền được cập nhật phù hợp với thương hiệu mới."
- **Ghi chú cho AI**: AI cần đọc kỹ `PromptTK.pdf` và `ChiaTask.pdf` để hiểu rõ các yêu cầu về thương hiệu và kỹ thuật. Đối với việc thay thế văn bản, AI cần thực hiện tìm kiếm và thay thế toàn bộ trong mã nguồn sau khi sao chép giao diện.

#### Task 1: Trang chủ (Landing Page)

- **Mục tiêu**: Sao chép hoàn hảo trang chủ của Devin.ai và tích hợp thông tin thương hiệu mới.
- **Giao việc cho AI**: 
  - "Sao chép 100% giao diện trang chủ của [Devin.ai](https://devin.ai/), bao gồm bố cục, màu sắc, font chữ, hình ảnh, video nền, và đặc biệt là các animation và hiệu ứng cuộn (scroll effects)."
  - "Đảm bảo các nút bấm có hiệu ứng hover tương tự bản gốc và được cấu hình để route đến các trang tương ứng (ví dụ: 'Get started' đến trang đăng ký, 'Login' đến trang đăng nhập)."
  - "Tích hợp logo mới và các thay đổi thương hiệu ('HDT', 'HDT AI') vào các vị trí phù hợp trên trang chủ."
  - "**Cách AI lấy thông tin công ty và bố trí hợp lý**: Đối với các phần giới thiệu chung về công ty hoặc các giá trị cốt lõi trên trang chủ (nếu có, tương tự như phần 'Devin, the AI software engineer' và 'Crush your backlog...' của Devin), AI cần tham khảo file `thongtincongty.pdf`.
    - AI nên trích xuất các đoạn văn bản ngắn gọn, súc tích từ phần 'GIỚI THIỆU' và 'TẦM NHÌN – SỨ MỆNH – GIÁ TRỊ CỐT LÕI' để đưa vào các khu vực nổi bật trên trang chủ.
    - Ví dụ: Thay vì 'Devin, the AI software engineer', có thể là 'HDT AI, Giải pháp Trí tuệ Nhân tạo Tiên phong'. Thay vì 'Crush your backlog with your personal AI engineering team.', có thể là 'Tăng tốc hiệu suất – tiết kiệm chi phí – đột phá sáng tạo với đội ngũ AI của bạn.'"
- **Ghi chú cho AI**: AI cần phân tích cấu trúc DOM và CSS của trang Devin.ai để tái tạo chính xác các hiệu ứng. Đối với nội dung, ưu tiên sự ngắn gọn và tác động mạnh mẽ trên trang chủ.

#### Task 2: Trang Enterprise

- **Mục tiêu**: Sao chép trang Enterprise và đảm bảo tính responsive.
- **Giao việc cho AI**: 
  - "Sao chép giao diện và nội dung của trang Enterprise từ [Devin.ai](https://devin.ai/enterprise) (cần truy cập link này để lấy nội dung)."
  - "Đảm bảo bố cục, chia cột, các phần testimonial, và hình ảnh được clone chính xác."
  - "Thiết kế trang responsive hoàn chỉnh cho mobile, tablet, và desktop."
  - "Cấu hình route `/enterprise` cho trang này."
- **Ghi chú cho AI**: AI cần chú ý đến các chi tiết nhỏ trong thiết kế responsive của Devin.ai để đảm bảo trải nghiệm người dùng nhất quán trên mọi thiết bị.

#### Task 3: Trang Pricing

- **Mục tiêu**: Sao chép trang Pricing với bố cục bảng giá.
- **Giao việc cho AI**: 
  - "Sao chép giao diện và nội dung của trang Pricing từ [Devin.ai](https://devin.ai/pricing) (cần truy cập link này để lấy nội dung)."
  - "Tái tạo bố cục bảng giá, bao gồm 2 cột chính (ví dụ: 'Gói cơ bản' và 'Gói doanh nghiệp')."
  - "Đảm bảo nút 'Get Started' hoạt động và route đúng đến trang đăng ký/bắt đầu."
  - "Cấu hình route `/pricing` cho trang này."
- **Ghi chú cho AI**: AI cần đặc biệt chú ý đến các chi tiết về giá, tính năng, và các hiệu ứng tương tác (nếu có) trên bảng giá.

#### Task 4: Trang Customers

- **Mục tiêu**: Sao chép trang Customers.
- **Giao việc cho AI**: 
  - "Sao chép giao diện và nội dung của trang Customers từ [Devin.ai](https://devin.ai/customers) (cần truy cập link này để lấy nội dung)."
  - "Hiển thị các khách hàng tiêu biểu và các hình ảnh thương hiệu tương tự bản gốc."
  - "Nếu có slider hoặc carousel, tái tạo chính xác hiệu ứng và chức năng của nó."
  - "Cấu hình route `/customers` cho trang này."
- **Ghi chú cho AI**: AI cần tập trung vào việc tái tạo các yếu tố trực quan và động của trang này.

#### Task 5: Các trang thông tin và chức năng khác (About us, Careers, Blog, Contact, Docs, Login, Get started)

- **Mục tiêu**: Thiết kế các trang còn lại, đặc biệt chú trọng việc tích hợp thông tin công ty HDT AI.
- **Giao việc cho AI**: 
  - "Thiết kế trang 'About us' (`/about-us`):
    - **Cách AI lấy thông tin công ty và bố trí hợp lý**: AI cần sử dụng toàn bộ thông tin từ file `thongtincongty.pdf` để xây dựng nội dung cho trang này. Các phần như 'GIỚI THIỆU', 'TẦM NHÌN – SỨ MỆNH – GIÁ TRỊ CỐT LÕI', 'LĨNH VỰC HOẠT ĐỘNG CHÍNH', 'CON NGƯỜI LÀ TRUNG TÂM', và 'CAM KẾT CỦA HDT AI' nên được trình bày một cách rõ ràng, có cấu trúc (ví dụ: dùng các tiêu đề, đoạn văn, danh sách). AI nên bố trí thông tin theo một luồng hợp lý, dễ đọc, và có thể thêm các yếu tố thiết kế trực quan (icons, hình ảnh minh họa) nếu phù hợp với phong cách Devin.ai."
  - "Thiết kế trang 'Careers' (`/careers`):
    - **Cách AI lấy thông tin công ty và bố trí hợp lý**: AI cần tham khảo phần 'CON NGƯỜI LÀ TRUNG TÂM' và 'CAM KẾT CỦA HDT AI' từ `thongtincongty.pdf` để xây dựng phần giới thiệu về văn hóa và giá trị công ty. Đối với các vị trí tuyển dụng cụ thể, AI có thể tạo các placeholder hoặc cấu trúc chung, và ghi chú rằng nội dung chi tiết sẽ được cung cấp sau."
  - "Thiết kế trang 'Blog' (`/blog`):
    - AI cần tạo một cấu trúc trang blog cơ bản (ví dụ: danh sách bài viết, trang chi tiết bài viết) theo phong cách Devin.ai. Nội dung bài viết có thể là placeholder hoặc AI có thể tạo nội dung mẫu dựa trên lĩnh vực hoạt động của HDT AI từ `thongtincongty.pdf`."
  - "Thiết kế trang 'Contact' (`/contact`):
    - **Cách AI lấy thông tin công ty và bố trí hợp lý**: AI cần tạo một form liên hệ và các thông tin liên hệ cơ bản (email, số điện thoại, địa chỉ) nếu có trong `thongtincongty.pdf` hoặc tạo placeholder. AI cũng có thể thêm bản đồ (nếu có địa chỉ cụ thể) và các liên kết mạng xã hội."
  - "Thiết kế trang 'Docs' (`/docs`):
    - AI cần tạo một cấu trúc trang tài liệu cơ bản, có thể là một trang trống hoặc với các mục lục placeholder, theo phong cách Devin.ai."
  - "Thiết kế trang 'Login' (`/login`) và 'Get started' (`/get-started`):
    - Sao chép giao diện của các trang này từ Devin.ai. Đảm bảo các trường nhập liệu, nút bấm, và liên kết (ví dụ: 'Forgot password', 'Sign up') hoạt động đúng chức năng (có thể là placeholder cho backend).
- **Ghi chú cho AI**: Đối với các trang thông tin, AI cần ưu tiên sự rõ ràng, đầy đủ và dễ hiểu. Việc bố trí thông tin từ `thongtincongty.pdf` cần logic và hấp dẫn người đọc.

## 4. Quy trình làm việc đề xuất cho AI

Để tối ưu hóa quá trình, AI nên tuân thủ quy trình sau:

1.  **Phân tích sâu**: Đọc kỹ tất cả các tài liệu PDF và duyệt qua toàn bộ trang Devin.ai để nắm bắt mọi chi tiết về thiết kế, bố cục, hiệu ứng, và nội dung.
2.  **Lập kế hoạch chi tiết**: Tạo một kế hoạch thực hiện từng task, bao gồm các bước nhỏ hơn và các công cụ cần sử dụng.
3.  **Thiết lập dự án**: Thực hiện Task 0 (chuẩn bị chung) để có một nền tảng vững chắc.
4.  **Phát triển lặp lại**: Thực hiện từng task một (từ Task 1 đến Task 5). Sau mỗi task, tự kiểm tra và điều chỉnh để đảm bảo đạt được yêu cầu.
5.  **Tích hợp thông tin công ty**: Trong quá trình thiết kế các trang, đặc biệt là các trang thông tin, chủ động lấy và bố trí thông tin từ `thongtincongty.pdf` một cách hợp lý và hấp dẫn.
6.  **Kiểm tra đa ngôn ngữ**: Sau khi hoàn thành các trang, kiểm tra chức năng chuyển đổi ngôn ngữ và đảm bảo nội dung hiển thị chính xác ở cả Tiếng Việt và Tiếng Anh.
7.  **Kiểm tra Responsive**: Đảm bảo tất cả các trang đều hiển thị tốt trên các thiết bị khác nhau (mobile, tablet, desktop).
8.  **Tổng hợp và Báo cáo**: Sau khi hoàn thành tất cả các task, tổng hợp lại kết quả và báo cáo cho người dùng.

## 5. Các yếu tố cần AI lưu ý để đạt kết quả tốt nhất

- **Độ chính xác hình ảnh**: AI cần có khả năng phân tích hình ảnh và video từ trang Devin.ai để tái tạo chính xác các chi tiết nhỏ nhất về màu sắc, gradient, khoảng cách, và hiệu ứng.
- **Hiểu biết về UI/UX**: AI nên áp dụng các nguyên tắc UI/UX tốt nhất để không chỉ sao chép mà còn cải thiện trải nghiệm người dùng nếu có thể (trong khuôn khổ yêu cầu sao chép).
- **Quản lý tài nguyên**: AI cần biết cách quản lý các tài nguyên như logo, hình ảnh, font chữ để đảm bảo chúng được tích hợp đúng cách và tối ưu cho hiệu suất.
- **Khả năng tự học và thích nghi**: Nếu gặp phải các hiệu ứng hoặc bố cục phức tạp, AI cần có khả năng tìm kiếm giải pháp hoặc hỏi thêm thông tin để hoàn thành task.
- **Giao tiếp rõ ràng**: AI cần báo cáo tiến độ và các vấn đề gặp phải một cách rõ ràng để người dùng có thể hỗ trợ kịp thời.

Bằng cách tuân thủ đề xuất này, AI sẽ có một lộ trình rõ ràng để thiết kế giao diện website giống Devin.ai một cách hiệu quả và chính xác, đồng thời tích hợp thông tin công ty HDT AI một cách chuyên nghiệp và hợp lý.



## 6. Bổ sung: Thiết kế Frontend cho Phần Tin tức (Blog) để tiện Quản trị Backend

Để đảm bảo phần frontend của các trang tin tức (Blog) được thiết kế một cách hợp lý, tiện lợi cho việc quản trị từ backend, AI cần lưu ý các điểm sau:

### 6.1. Cấu trúc Dữ liệu và API

- **API Driven**: Frontend nên được thiết kế để lấy dữ liệu tin tức hoàn toàn thông qua API từ backend. Điều này đảm bảo sự tách biệt rõ ràng giữa giao diện và dữ liệu, giúp backend có thể quản lý nội dung một cách độc lập.
- **Endpoint rõ ràng**: Cần có các endpoint API rõ ràng cho việc:
  - Lấy danh sách bài viết (ví dụ: `/api/articles`, `/api/posts`).
  - Lấy chi tiết một bài viết (ví dụ: `/api/articles/{id}`).
  - Lấy các danh mục/thẻ (categories/tags) của bài viết.
  - Có thể có các tham số truy vấn (query parameters) cho việc phân trang (pagination), lọc (filtering) theo danh mục/thẻ, tìm kiếm (search).
- **Cấu trúc dữ liệu bài viết**: Backend nên cung cấp dữ liệu bài viết với cấu trúc JSON chuẩn hóa, bao gồm các trường cần thiết như:
  - `id`: ID duy nhất của bài viết.
  - `title`: Tiêu đề bài viết.
  - `slug`: URL thân thiện (ví dụ: `bai-viet-moi-nhat`).
  - `author`: Tác giả.
  - `publish_date`: Ngày xuất bản.
  - `thumbnail_url`: URL hình ảnh đại diện.
  - `content`: Nội dung bài viết (có thể là HTML, Markdown, hoặc JSON block).
  - `categories`: Danh sách các danh mục.
  - `tags`: Danh sách các thẻ.
  - `seo_title`, `seo_description`, `seo_keywords`: Các trường cho SEO.

### 6.2. Thiết kế Giao diện Frontend (Blog)

- **Trang danh sách bài viết (Blog Listing Page)**:
  - **Bố cục linh hoạt**: Thiết kế các component cho từng bài viết (card component) sao cho có thể dễ dàng hiển thị dưới dạng lưới (grid) hoặc danh sách (list). Điều này giúp backend có thể thay đổi cách hiển thị mà không cần can thiệp vào frontend.
  - **Phân trang/Tải thêm (Pagination/Load More)**: Triển khai cơ chế phân trang hoặc nút "Load More" để tải thêm bài viết khi người dùng cuộn xuống. Điều này giúp giảm tải cho server và cải thiện hiệu năng tải trang ban đầu.
  - **Bộ lọc và Tìm kiếm**: Cung cấp các bộ lọc theo danh mục, thẻ, và ô tìm kiếm. Các bộ lọc này sẽ gửi yêu cầu đến backend thông qua API để lấy dữ liệu tương ứng.
  - **Placeholder/Skeleton Loading**: Sử dụng hiệu ứng placeholder hoặc skeleton loading khi dữ liệu đang được tải từ backend, mang lại trải nghiệm người dùng mượt mà hơn.

- **Trang chi tiết bài viết (Single Post Page)**:
  - **Nội dung động**: Frontend chỉ cần render nội dung bài viết nhận được từ API. Nếu nội dung là Markdown, frontend sẽ sử dụng thư viện Markdown parser để chuyển đổi thành HTML. Nếu là HTML, chỉ cần render trực tiếp.
  - **Thành phần tái sử dụng**: Các thành phần như tiêu đề, hình ảnh, đoạn văn, danh sách, blockquote, code block, v.v., nên được thiết kế dưới dạng các component React có thể tái sử dụng, giúp dễ dàng hiển thị các loại nội dung khác nhau từ backend.
  - **Mục lục (Table of Contents)**: Tự động tạo mục lục dựa trên các tiêu đề (H1, H2, H3) trong nội dung bài viết. Điều này giúp người đọc dễ dàng điều hướng trong bài viết dài.
  - **Bình luận (Comments)**: Nếu có tính năng bình luận, cần có API riêng cho việc gửi/nhận bình luận và frontend sẽ hiển thị chúng.
  - **Bài viết liên quan (Related Posts)**: Hiển thị danh sách các bài viết liên quan (dựa trên danh mục, thẻ, hoặc thuật toán của backend) để tăng thời gian người dùng ở lại trang.

### 6.3. Tối ưu hóa cho Quản trị Backend

- **Content Management System (CMS) Friendly**: Thiết kế frontend sao cho dễ dàng tích hợp với một CMS headless (ví dụ: Strapi, Contentful, Sanity) hoặc một hệ thống quản trị nội dung tùy chỉnh được xây dựng trên backend. Điều này có nghĩa là frontend không nên có quá nhiều logic cứng về cấu trúc nội dung, mà nên linh hoạt để hiển thị bất kỳ nội dung nào được backend cung cấp.
- **Preview Mode**: Nếu có thể, hỗ trợ chế độ xem trước (preview mode) cho phép người quản trị xem trước bài viết trên frontend trước khi xuất bản chính thức.
- **Editor-agnostic Content**: Nếu backend sử dụng một trình soạn thảo nội dung (rich text editor) cụ thể, frontend cần có khả năng render đầu ra của trình soạn thảo đó một cách chính xác (ví dụ: nếu backend lưu HTML, frontend render HTML; nếu backend lưu JSON blocks, frontend render các block đó thành component).

### 6.4. Đề xuất cho AI khi thiết kế phần Blog

- **Ưu tiên API và dữ liệu động**: AI cần hiểu rằng các trang blog không phải là các trang tĩnh mà là các trang động, được xây dựng dựa trên dữ liệu từ API. Do đó, AI cần tập trung vào việc tạo ra các component linh hoạt có thể hiển thị dữ liệu động.
- **Tái sử dụng component**: Tối đa hóa việc tái sử dụng các component UI (ví dụ: card bài viết, nút, typography) để đảm bảo tính nhất quán và dễ bảo trì.
- **Cân nhắc SEO**: Mặc dù backend chịu trách nhiệm chính về dữ liệu SEO, frontend cần đảm bảo rằng các thẻ meta và cấu trúc HTML là thân thiện với SEO (ví dụ: sử dụng các thẻ semantic HTML, đảm bảo nội dung có thể được crawl).
- **Xử lý trạng thái tải và lỗi**: Triển khai các trạng thái tải (loading states) và hiển thị thông báo lỗi (error messages) rõ ràng khi có vấn đề với API hoặc dữ liệu.

Bằng cách tuân thủ các nguyên tắc này, phần frontend của Blog sẽ không chỉ đẹp mắt và thân thiện với người dùng mà còn cực kỳ dễ quản lý và mở rộng từ phía backend, cho phép người quản trị dễ dàng thêm, sửa, xóa bài viết mà không cần can thiệp vào code frontend.



